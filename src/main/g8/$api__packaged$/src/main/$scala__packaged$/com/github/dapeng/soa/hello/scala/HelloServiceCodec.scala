package com.github.dapeng.soa.hello.scala
import com.github.dapeng.soa.hello.scala.domain.serializer._;

import com.github.dapeng.core._
import com.github.dapeng.org.apache.thrift._
import com.github.dapeng.org.apache.thrift.protocol._
import com.github.dapeng.core.definition._

/**
* Autogenerated by Dapeng-Code-Generator (1.2.2)
*
* DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*  @generated
**/
object HelloServiceCodec {


    case class sayHello_args(hello:com.github.dapeng.soa.hello.scala.domain.Hello)

    case class sayHello_result(success:String)

    class SayHello_argsSerializer extends BeanSerializer[sayHello_args]{

@throws[TException]
override def read(iprot: TProtocol): sayHello_args = {

var schemeField: com.github.dapeng.org.apache.thrift.protocol.TField = null
iprot.readStructBegin()

var hello: com.github.dapeng.soa.hello.scala.domain.Hello = null


while (schemeField == null || schemeField.`type` != com.github.dapeng.org.apache.thrift.protocol.TType.STOP) {

schemeField = iprot.readFieldBegin

schemeField.id match {

      case 1 =>
          schemeField.`type` match {
            case com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT => hello = new com.github.dapeng.soa.hello.scala.domain.serializer.HelloSerializer().read(iprot)
            case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
    }

  case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
}
}

iprot.readFieldEnd
iprot.readStructEnd

val bean = sayHello_args(hello = hello)
validate(bean)

bean
}

@throws[TException]
override def write(bean: sayHello_args, oprot: TProtocol): Unit = {

validate(bean)
oprot.writeStructBegin(new com.github.dapeng.org.apache.thrift.protocol.TStruct("sayHello_args"))


    {
    val elem0 = bean.hello
    oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("hello", com.github.dapeng.org.apache.thrift.protocol.TType.STRUCT, 1.asInstanceOf[Short]))
     new com.github.dapeng.soa.hello.scala.domain.serializer.HelloSerializer().write(elem0, oprot)
    oprot.writeFieldEnd

    }
oprot.writeFieldStop
oprot.writeStructEnd
}

@throws[TException]
override def validate(bean: sayHello_args): Unit = {

      if(bean.hello == null)
      throw new SoaException(SoaBaseCode.NotNull, "hello字段不允许为空")

        if(bean.hello != null)
        new com.github.dapeng.soa.hello.scala.domain.serializer.HelloSerializer().validate(bean.hello)

}


    override def toString(bean: sayHello_args): String = if(bean == null)  "null" else bean.toString
    }

    class SayHello_resultSerializer extends BeanSerializer[sayHello_result]{

    @throws[TException]
    override def read(iprot: TProtocol): sayHello_result = {

      var schemeField: com.github.dapeng.org.apache.thrift.protocol.TField = null
      iprot.readStructBegin

      var success : String = null

      while (schemeField == null || schemeField.`type` != com.github.dapeng.org.apache.thrift.protocol.TType.STOP) {

        schemeField = iprot.readFieldBegin

        schemeField.id match {
            case 0 =>
               schemeField.`type` match {
                  case com.github.dapeng.org.apache.thrift.protocol.TType.STRING =>  success = iprot.readString
                  case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
          }
            case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }

        iprot.readFieldEnd
      }

      iprot.readStructEnd
      val bean = sayHello_result(success)
      validate(bean)

      bean
    }


@throws[TException]
override def write(bean: sayHello_result, oprot: TProtocol): Unit = {

validate(bean)
oprot.writeStructBegin(new com.github.dapeng.org.apache.thrift.protocol.TStruct("sayHello_result"))


    {
    val elem0 = bean.success
    oprot.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("success", com.github.dapeng.org.apache.thrift.protocol.TType.STRING, 0.asInstanceOf[Short]))
    oprot.writeString(elem0)
    oprot.writeFieldEnd

    }
oprot.writeFieldStop
oprot.writeStructEnd
}


@throws[TException]
override def validate(bean: sayHello_result): Unit = {

      if(bean.success == null)
      throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空")

}


    override def toString(bean: sayHello_result): String = if(bean == null)  "null" else bean.toString
  }

    class sayHello extends SoaFunctionDefinition.Sync[com.github.dapeng.soa.hello.scala.service.HelloService, sayHello_args, sayHello_result]("sayHello", new SayHello_argsSerializer(), new SayHello_resultSerializer()){

    @throws[TException]
    def apply(iface: com.github.dapeng.soa.hello.scala.service.HelloService, args: sayHello_args):sayHello_result = {

      val _result = iface.sayHello(args.hello)
      sayHello_result(_result )
    }
  }

case class getServiceMetadata_args()

case class getServiceMetadata_result(success: String)

class GetServiceMetadata_argsSerializer extends BeanSerializer[getServiceMetadata_args] {

  @throws[TException]
  override def read(iprot: TProtocol): getServiceMetadata_args = {

    iprot.readStructBegin

    var schemeField: com.github.dapeng.org.apache.thrift.protocol.TField = null

    while (schemeField == null || schemeField.`type` != com.github.dapeng.org.apache.thrift.protocol.TType.STOP) {
      schemeField = iprot.readFieldBegin
      com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
      iprot.readFieldEnd
    }

    iprot.readStructEnd

    val bean = getServiceMetadata_args()
    validate(bean)

    bean
  }

  @throws[TException]
  override def write(bean: getServiceMetadata_args, oproto: TProtocol): Unit = {
    validate(bean)
    oproto.writeStructBegin(new com.github.dapeng.org.apache.thrift.protocol.TStruct("getServiceMetadata_args"))

    oproto.writeFieldStop
    oproto.writeStructEnd
  }

  @throws[TException]
  override def validate(bean: getServiceMetadata_args): Unit = {}

  override def toString(bean: getServiceMetadata_args): String = if (bean == null) "null" else bean.toString
}



class GetServiceMetadata_resultSerializer extends BeanSerializer[getServiceMetadata_result] {
  @throws[TException]
  override def read(iprot: TProtocol): getServiceMetadata_result = {
    iprot.readStructBegin

    var schemeField: com.github.dapeng.org.apache.thrift.protocol.TField = null

    var success: String = null

    while (schemeField == null || schemeField.`type` != com.github.dapeng.org.apache.thrift.protocol.TType.STOP) {
      schemeField = iprot.readFieldBegin

      schemeField.id match {
        case 0 =>
        schemeField.`type` match {
          case com.github.dapeng.org.apache.thrift.protocol.TType.STRING => success = iprot.readString
          case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
        }
        case _ => com.github.dapeng.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.`type`)
      }
      iprot.readFieldEnd
    }

    iprot.readStructEnd
    val bean = getServiceMetadata_result(success)
    validate(bean)

    bean
  }

  @throws[TException]
  override def write(bean: getServiceMetadata_result, oproto: TProtocol): Unit = {
    validate(bean)
    oproto.writeStructBegin(new com.github.dapeng.org.apache.thrift.protocol.TStruct("getServiceMetadata_result"))

    oproto.writeFieldBegin(new com.github.dapeng.org.apache.thrift.protocol.TField("success", com.github.dapeng.org.apache.thrift.protocol.TType.STRING, 0.asInstanceOf[Short]))
    oproto.writeString(bean.success)
    oproto.writeFieldEnd

    oproto.writeFieldStop
    oproto.writeStructEnd
  }

  @throws[TException]
  override def validate(bean: getServiceMetadata_result): Unit = {
    if (bean.success == null)
    throw new SoaException(SoaBaseCode.NotNull, "success字段不允许为空")
  }

  override def toString(bean: getServiceMetadata_result): String = if (bean == null) "null" else bean.toString

}



class getServiceMetadata extends SoaFunctionDefinition.Sync[com.github.dapeng.soa.hello.scala.service.HelloService, getServiceMetadata_args, getServiceMetadata_result](
"getServiceMetadata", new GetServiceMetadata_argsSerializer(), new GetServiceMetadata_resultSerializer()) {


@throws[TException]
override def apply(iface: com.github.dapeng.soa.hello.scala.service.HelloService, args: getServiceMetadata_args): getServiceMetadata_result = {

      val source = scala.io.Source.fromInputStream(HelloServiceCodec.getClass.getClassLoader.getResourceAsStream("com.github.dapeng.soa.hello.service.HelloService.xml"))
      val success = source.mkString
      source.close
      getServiceMetadata_result(success)

}
}

class Processor(iface: com.github.dapeng.soa.hello.scala.service.HelloService) extends
SoaServiceDefinition(iface,classOf[com.github.dapeng.soa.hello.scala.service.HelloService], Processor.getProcessMap)

object Processor{

  type PF = SoaFunctionDefinition[com.github.dapeng.soa.hello.scala.service.HelloService, _, _]

  def getProcessMap(): java.util.Map[String, PF] = {
     val map = new java.util.HashMap[String, PF]()
    map.put("sayHello", new sayHello)

    map.put("getServiceMetadata", new getServiceMetadata)
    map
  }

}
}
